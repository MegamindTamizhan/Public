```
@echo off
setlocal

:: Define the log file path in the %TEMP% directory
set "LOGFILE=%TEMP%\permissions_log.txt"

:: Start the log
echo Script started at %date% %time% > "%LOGFILE%"

:: Set user-specific paths
set "USERNAME=%USERNAME%"
set "DESKTOPFOLDER=C:\Users\%USERNAME%\Desktop"
set "DOCUMENTSFOLDER=C:\Users\%USERNAME%\Documents"
set "MUSICFOLDER=C:\Users\%USERNAME%\Music"
set "PICTURESFOLDER=C:\Users\%USERNAME%\Pictures"
set "VIDEOSFOLDER=C:\Users\%USERNAME%\Videos"
set "THREEDFOLDER=C:\Users\%USERNAME%\3D Objects"
set "SAVEDGAMESFOLDER=C:\Users\%USERNAME%\Saved Games"
set "SEARCHESFOLDER=C:\Users\%USERNAME%\Searches"
set "LINKSFOLDER=C:\Users\%USERNAME%\Links"
set "FAVORITESFOLDER=C:\Users\%USERNAME%\Favorites"
set "CONTACTSFOLDER=C:\Users\%USERNAME%\Contacts"
set "DOWNLOADSFOLDER=C:\Users\%USERNAME%\Downloads"

:: Set read-only permissions for each folder
for %%F in ("%DESKTOPFOLDER%" "%DOCUMENTSFOLDER%" "%MUSICFOLDER%" "%PICTURESFOLDER%" "%VIDEOSFOLDER%" "%THREEDFOLDER%" "%SAVEDGAMESFOLDER%" "%SEARCHESFOLDER%" "%LINKSFOLDER%" "%FAVORITESFOLDER%" "%CONTACTSFOLDER%" "%DOWNLOADSFOLDER%") do (
    if exist "%%~F" (
        echo Setting permissions for "%%~F"... >> "%LOGFILE%"
        icacls "%%~F" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~F" /grant:r "%USERNAME%:(RX)" >> "%LOGFILE%" 2>&1

        if errorlevel 1 (
            echo Error: Failed to set permissions for %%F at %date% %time% >> "%LOGFILE%"
            exit /b 1
        )
    ) else (
        echo Warning: Folder "%%~F" does not exist. Skipping... >> "%LOGFILE%"
    )
)

echo Script completed successfully at %date% %time% >> "%LOGFILE%"

endlocal
exit /b 0
```

Second for Inherit

```
@echo off
setlocal

:: Define the log file path in the %TEMP% directory
set "LOGFILE=%TEMP%\permissions_log.txt"

:: Start the log
echo Script started at %date% %time% > "%LOGFILE%"

:: Set user-specific paths
set "USERNAME=%USERNAME%"
set "DESKTOPFOLDER=C:\Users\%USERNAME%\Desktop"
set "DOCUMENTSFOLDER=C:\Users\%USERNAME%\Documents"
set "MUSICFOLDER=C:\Users\%USERNAME%\Music"
set "PICTURESFOLDER=C:\Users\%USERNAME%\Pictures"
set "VIDEOSFOLDER=C:\Users\%USERNAME%\Videos"
set "THREEDFOLDER=C:\Users\%USERNAME%\3D Objects"
set "SAVEDGAMESFOLDER=C:\Users\%USERNAME%\Saved Games"
set "SEARCHESFOLDER=C:\Users\%USERNAME%\Searches"
set "LINKSFOLDER=C:\Users\%USERNAME%\Links"
set "FAVORITESFOLDER=C:\Users\%USERNAME%\Favorites"
set "CONTACTSFOLDER=C:\Users\%USERNAME%\Contacts"
set "DOWNLOADSFOLDER=C:\Users\%USERNAME%\Downloads"

:: Set read-only permissions with inheritance for each folder
for %%F in ("%DESKTOPFOLDER%" "%DOCUMENTSFOLDER%" "%MUSICFOLDER%" "%PICTURESFOLDER%" "%VIDEOSFOLDER%" "%THREEDFOLDER%" "%SAVEDGAMESFOLDER%" "%SEARCHESFOLDER%" "%LINKSFOLDER%" "%FAVORITESFOLDER%" "%CONTACTSFOLDER%" "%DOWNLOADSFOLDER%") do (
    if exist "%%~F" (
        echo Setting permissions for "%%~F"... >> "%LOGFILE%"
        
        :: Check current permissions
        icacls "%%~F" | findstr /i "%USERNAME%:(F)" >nul
        if errorlevel 1 (
            :: Reset permissions
            icacls "%%~F" /reset >> "%LOGFILE%" 2>&1
            icacls "%%~F" /inheritance:r >> "%LOGFILE%" 2>&1
            icacls "%%~F" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1

            if errorlevel 1 (
                echo Error: Failed to set permissions for %%F at %date% %time% >> "%LOGFILE%"
                exit /b 1
            )
        ) else (
            echo Folder "%%~F" already has full control. Skipping... >> "%LOGFILE%"
        )
    ) else (
        echo Warning: Folder "%%~F" does not exist. Skipping... >> "%LOGFILE%"
    )
)

echo Script completed successfully at %date% %time% >> "%LOGFILE%"

endlocal
exit /b 0

```

# D_Drive_Exisiting_Read_Only

```
@echo off
setlocal

set "excludeFolder=D:\%USERNAME%-Data"
set "LOGFILE=%TEMP%\d_drive_permission_log.txt"

rem Loop through all directories in D: drive
for /d %%D in (D:\*) do (
    if /I not "%%D"=="%excludeFolder%" (
        icacls "%%~D" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~D" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

rem Loop through all files in D: drive
for /r D:\ %%F in (*) do (
    if /I not "%%F"=="%excludeFolder%\*" (
        icacls "%%~F" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~F" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

echo Permissions set successfully at %date% %time% >> "%LOGFILE%"
endlocal

```

# D Drive Read-Only New

```
@echo off
setlocal

set "excludeFolder=D:\%USERNAME%-Data"
set "LOGFILE=%TEMP%\d_drive_permission_log.txt"

rem Normalize the exclude folder to ensure comparisons are accurate
set "excludeFolder=%excludeFolder:\=\\%"

rem Loop through all directories in D: drive
for /d %%D in (D:\*) do (
    rem Normalize the current directory path for comparison
    set "currentDir=%%~fD"
    set "currentDir=!currentDir:\=\\!"

    rem Exclude the %USERNAME%-Data folder
    if /I not "!currentDir!"=="%excludeFolder%" (
        icacls "%%~D" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~D" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

rem Loop through all files in D: drive
for /r D:\ %%F in (*) do (
    rem Check if the file is inside the excluded folder
    echo %%F | findstr /I /C:"%USERNAME%-Data" >nul
    if errorlevel 1 (
        icacls "%%~F" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~F" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

echo Permissions set successfully at %date% %time% >> "%LOGFILE%"
endlocal
```

# Exclude Download & UserData

```
@echo off
setlocal

set "excludeFolder1=D:\%USERNAME%-Data"
set "excludeFolder2=D:\%USERNAME%\Downloads"
set "LOGFILE=%TEMP%\d_drive_permission_log.txt"

rem Normalize exclude folder paths for accurate comparison
set "excludeFolder1=%excludeFolder1:\=\\%"
set "excludeFolder2=%excludeFolder2:\=\\%"

rem Loop through all directories in D: drive
for /d %%D in (D:\*) do (
    rem Normalize the current directory path for comparison
    set "currentDir=%%~fD"
    set "currentDir=!currentDir:\=\\!"

    rem Exclude the %USERNAME%-Data and %USERNAME%\Downloads folders
    if /I not "!currentDir!"=="%excludeFolder1%" if /I not "!currentDir!"=="%excludeFolder2%" (
        icacls "%%~D" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~D" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

rem Loop through all files in D: drive
for /r D:\ %%F in (*) do (
    rem Check if the file is inside the excluded folders
    echo %%F | findstr /I /C:"%USERNAME%-Data" /C:"%USERNAME%\Downloads" >nul
    if errorlevel 1 (
        icacls "%%~F" /inheritance:r >> "%LOGFILE%" 2>&1
        icacls "%%~F" /grant:r "%USERNAME%:(RX)" /t /c /q >> "%LOGFILE%" 2>&1
    )
)

echo Permissions set successfully at %date% %time% >> "%LOGFILE%"
endlocal
```

# Folder Creation

```
@echo off
setlocal

:: Set user-specific folder paths
set "USERNAME=%USERNAME%"
set "USERFOLDER1=D:\%USERNAME%"        :: Main user folder
set "USERFOLDER2=D:\%USERNAME%-Data"   :: User data folder

:: Create D:\%USERNAME% folder if it doesn't exist
if not exist "%USERFOLDER1%" (
    mkdir "%USERFOLDER1%"
    echo Created folder: %USERFOLDER1%
)

:: Create D:\%USERNAME%-Data folder if it doesn't exist
if not exist "%USERFOLDER2%" (
    mkdir "%USERFOLDER2%"
    echo Created folder: %USERFOLDER2%
)

:: Set appropriate permissions for D:\%USERNAME% folder
icacls "%USERFOLDER1%" /inheritance:r
icacls "%USERFOLDER1%" /grant "%USERNAME%:(OI)(CI)(M,RX,W)"
icacls "%USERFOLDER1%" /grant "Domain Admins:(OI)(CI)(F)"
icacls "%USERFOLDER1%" /deny "%USERNAME%:(DE)"

:: Set appropriate permissions for D:\%USERNAME%-Data folder
icacls "%USERFOLDER2%" /inheritance:r
icacls "%USERFOLDER2%" /grant "%USERNAME%:(OI)(CI)(M,RX,W)"
icacls "%USERFOLDER2%" /grant "Domain Admins:(OI)(CI)(F)"
icacls "%USERFOLDER2%" /deny "%USERNAME%:(DE)"

if errorlevel 1 (
    echo Error: Failed to set permissions for user folders.
    exit /b 1
)

echo User folders created and permissions applied successfully.
endlocal
exit /b 0
```

hotfix

```
# Define the output path (central network share) where reports will be stored
$outputPath = "\\172.16.5.95\Share"
$tempDebugPath = "$env:TEMP\kbScriptDebug.log"

# Log start of the script execution
"Script started at $(Get-Date)" | Out-File -FilePath $tempDebugPath -Append

# Check if network path exists and log the check
if (!(Test-Path -Path $outputPath)) {
    New-Item -ItemType Directory -Path $outputPath -ErrorAction SilentlyContinue
    "Output path created or verified: $outputPath" | Out-File -FilePath $tempDebugPath -Append
} else {
    "Output path already exists: $outputPath" | Out-File -FilePath $tempDebugPath -Append
}

# Get the computer name
$computerName = $env:COMPUTERNAME
"Computer Name: $computerName" | Out-File -FilePath $tempDebugPath -Append

# Get the latest 10 installed hotfixes
try {
    $hotfixes = Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object -First 10
    "Hotfixes retrieved successfully" | Out-File -FilePath $tempDebugPath -Append
} catch {
    "Error retrieving hotfixes: $_" | Out-File -FilePath $tempDebugPath -Append
}

# Define the output file path
$outputFile = "$outputPath\$computerName-KBReport.csv"
"Output file path: $outputFile" | Out-File -FilePath $tempDebugPath -Append

# Export the output to CSV with headers
try {
    $hotfixes | Export-Csv -Path $outputFile -NoTypeInformation -Force
    "Hotfixes exported to CSV successfully" | Out-File -FilePath $tempDebugPath -Append
} catch {
    "Error exporting hotfixes to CSV: $_" | Out-File -FilePath $tempDebugPath -Append
}

# Optional: add error handling if you want to log failures
if ($hotfixes -eq $null) {
    "No hotfixes found on $computerName" | Out-File -FilePath $outputFile
    "No hotfixes found - logged to output file" | Out-File -FilePath $tempDebugPath -Append
}

# Log end of script execution
"Script ended at $(Get-Date)" | Out-File -FilePath $tempDebugPath -Append
```
